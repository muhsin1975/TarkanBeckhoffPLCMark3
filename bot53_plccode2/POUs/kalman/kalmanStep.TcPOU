<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="kalmanStep" Id="{49da3f9a-63ad-4c0f-9a0d-d5b9dfc4c942}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK kalmanStep
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
tmp0:ARRAY[0..2,0..2] OF LREAL;
tmp00:ARRAY[0..2,0..2] OF LREAL;
tmp00s:ARRAY[0..2,0..2] OF LREAL;
tmp00t:ARRAY[0..2,0..2] OF LREAL;
tmp000:ARRAY[0..2,0..2] OF LREAL;
Ft:ARRAY[0..2,0..2] OF LREAL;
Ht:ARRAY[0..2,0..1] OF LREAL;
Ht3:ARRAY[0..2,0..2] OF LREAL;
tmp1:ARRAY[0..2,0..1] OF LREAL;
tmp2:ARRAY[0..1,0..2] OF LREAL;
tmp3:ARRAY[0..1,0..1] OF LREAL;
tmp4:ARRAY[0..1,0..1] OF LREAL;
tmp5:ARRAY[0..1] OF LREAL;
tmp6:ARRAY[0..1,0..0] OF LREAL;
tmp7:ARRAY[0..1,0..0] OF LREAL;
tmp8:ARRAY[0..2,0..0] OF LREAL;
tmp5_3:ARRAY[0..2] OF LREAL;
tmp1_3,tmp2_3,tmp3_3,tmp4_3,Kt3:ARRAY[0..2,0..2] OF LREAL;
tmp6_3,tmp7_3:ARRAY[0..2] OF LREAL;
Kt:ARRAY[0..1,0..2] OF LREAL;

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//linSpdFdbckRobot := (rightWheelFdbck+leftWheelFdbck)*2*PI/60*wheel_radius/2;
  posTheta_wrt_robot_enc :=((-1*Locomotion_2_actual_pos - Locomotion_1_actual_pos)/10000)*360*wheel_radius/(2*robot_radius)/reducer_ratio + (-1*robotdata.qr_angle * 0.1); 
  //posTheta_wrt_robot_enc :=robotdata.encoder_omega*180/PI;
  linSpdFdbckRobot :=robotdata.encoder_v; 
  z_kalman1[0,0]:=linSpdFdbckRobot;
  z_kalman1[1,0]:=robotdata.imu_state.hr_acc_x-accXmean;
  z_kalman2[0,0]:=posTheta_wrt_robot_enc;
  z_kalman2[1,0]:=(robotdata.imu_state.hr_gyro_z-gyrozmean)*180/PI;

  kalman12_x := kalman12_x + x_kalman1[0,0]*COS(x_kalman2[0,0]*PI/180)*PLC_CYCLE;
  kalman12_y := kalman12_y + x_kalman1[0,0]*SIN(x_kalman2[0,0]*PI/180)*PLC_CYCLE;
  z_kalman3[0,0] :=qr_xstate;
  z_kalman3[1,0] := qr_ystate;
  z_kalman3[2,0] := -1*robotdata.qr_angle * 0.1;
      
  IF (pf_valid=0)THEN
        H_kalman3[0,0]:=0;H_kalman3[0,1]:=0;H_kalman3[0,2]:=0;
        H_kalman3[1,0]:=0;H_kalman3[1,1]:=0;H_kalman3[1,2]:=0;
        H_kalman3[2,0]:=0;H_kalman3[2,1]:=0;H_kalman3[2,2]:=0;
  
    else
        H_kalman3[0,0]:=1;H_kalman3[0,1]:=0;H_kalman3[0,2]:=0;
        H_kalman3[1,0]:=0;H_kalman3[1,1]:=1;H_kalman3[1,2]:=0;
        H_kalman3[2,0]:=0;H_kalman3[2,1]:=0;H_kalman3[2,2]:=1;
      END_IF
      

//************************KALMAN - 1****************************************************************/

    transpose(H_kalman1, Ht, 2, 3);
    mulmat(P_kalman1, Ht, tmp1, 3, 3, 2);

    mulmat(H_kalman1, P_kalman1, tmp2, 2, 3, 3);
    mulmat(tmp2, Ht, tmp3, 2, 3, 2);
    accum(tmp3, R_kalman1, 2, 2);
    IF (cholsl(tmp3, tmp4, tmp5, 2)=1) THEN 
	RETURN;
	END_IF
    mulmat(tmp1, tmp4, K_kalman1, 3, 2, 2);

    //x_kalman1 = x_kalman1 + K_kalman1*(z_kalman1-H_kalman1*x_kalman1);*/
    mulmat(H_kalman1,x_kalman1,tmp6,2,3,1);
    ssub(z_kalman1,tmp6,tmp7,2);
    mulmat(K_kalman1,tmp7,tmp8,3,2,1);
    accum(x_kalman1,tmp8,3,1);
  // P_kalman1 = (eye(3)-K_kalman1*H_kalman1)*P_kalman1*(eye(3)-K_kalman1*H_kalman1)'+K_kalman1*R_kalman1*K_kalman1';*/
  transpose(K_kalman1,Kt,3,2);
  mulmat(R_kalman1,Kt,tmp2,2,2,3);
  mulmat(K_kalman1,tmp2,tmp0,3,2,3);//tmp0=K_kalman1*R_kalman1*K_kalman1'*/
  
  mulmat(K_kalman1,H_kalman1,tmp00,3,2,3);
  sub_mat(I,tmp00,tmp00,3,3);
  transpose(tmp00,tmp00t,3,3);
  mulmat(P_kalman1,tmp00t,tmp00,3,3,3);//tmp00=P_kalman1*(eye(3)-K_kalman1*H_kalman1)'*/
 
  mulmat(K_kalman1,H_kalman1,tmp000,3,2,3);
  sub_Mat(I,tmp000,tmp000,3,3);//tmp000=(eye(3)-K_kalman1*H_kalman1)*/
  
  mulmat(tmp000,tmp00,P_kalman1,3,3,3);//P_kalman1= (eye(3)-K_kalman1*H_kalman1)*P_kalman1*(eye(3)-K_kalman1*H_kalman1)'*/
  accum(P_kalman1,tmp0,3,3);//P_kalman1= (eye(3)-K_kalman1*H_kalman1)*P_kalman1*(eye(3)-K_kalman1*H_kalman1)' + K_kalman1*R_kalman1*K_kalman1'*/
  
//  x_kalman2 = F_kalman2*x_kalman2;*/
  mulmat(F_kalman1,x_kalman1,tmp8,3,3,1);
  mulmat(I,tmp8,x_kalman1,3,3,1);
  //printMat(x_kalman1,3,1);
 // P_kalman2 = F_kalman2*P_kalman2*F_kalman2'+Q_kalman2;*/
  mulmat(F_kalman1, P_kalman1 ,tmp0, 3, 3, 3);
  transpose(F_kalman1,Ft, 3, 3);
  mulmat(tmp0, Ft, P_kalman1, 3, 3, 3);
  accum(P_kalman1, Q_kalman1, 3, 3);

//************************KALMAN - 2****************************************************************/

  //  K_kalman2 = P_kalman2*H_kalman2'*inv(H_kalman2*P_kalman2*H_kalman2'+R_kalman2);   */
  transpose(H_kalman2, Ht, 2, 3);
  mulmat(P_kalman2, Ht, tmp1, 3, 3, 2);
  mulmat(H_kalman2, P_kalman2, tmp2, 2, 3, 3);
  mulmat(tmp2, Ht, tmp3, 2, 3, 2);
  accum(tmp3, R_kalman2, 2, 2);  
    IF (cholsl(tmp3, tmp4, tmp5, 2)=1)THEN
      
      RETURN;
    END_IF
  mulmat(tmp1, tmp4, K_kalman2, 3, 2, 2);
  
  // err_kalman2(1,1) = errorDegreeCalculator(z_kalman2(1), x_kalman2(1)); */
  // err_kalman2(2,1) = z_kalman2 - x_kalman2(2); */
  err_kalman2[0,0] := errorDegreeCalculator(z_kalman2[0,0], x_kalman2[0,0]);
  err_kalman2[1,0] := z_kalman2[1,0] - x_kalman2[1,0];

  // x_kalman2 = x_kalman2 + K_kalman2 * err_kalman2; */
  mulmat(K_kalman2, err_kalman2, tmp8, 3, 2, 1);
  accum(x_kalman2,tmp8,3,1);

  // x_kalman2 = x_kalman2 + K_kalman2*(z_kalman2-H_kalman2*x_kalman2); */ //bu denklem yerine yukarıdaki 3 denklem eklendi
  // mulmat(H_kalman2,x_kalman2,tmp6,2,3,1); 
  // sub(z_kalman2,tmp6,tmp7,2);
  // mulmat(K_kalman2,tmp7,tmp8,3,2,1);
  // accum(x_kalman2,tmp8,3,1);

  // P_kalman2 = (eye(3)-K_kalman2*H_kalman2)*P_kalman2*(eye(3)-K_kalman2*H_kalman2)'+K_kalman2*R_kalman2*K_kalman2';*/
  transpose(K_kalman2,Kt,3,2);
  mulmat(R_kalman2,Kt,tmp2,2,2,3);
  mulmat(K_kalman2,tmp2,tmp0,3,2,3);//tmp0=K_kalman2*R_kalman2*K_kalman2'*/
  
  mulmat(K_kalman2,H_kalman2,tmp00,3,2,3);
  sub_Mat(I,tmp00,tmp00,3,3);
  transpose(tmp00,tmp00t,3,3);
  mulmat(P_kalman2,tmp00t,tmp00,3,3,3);//tmp00=P_kalman2*(eye(3)-K_kalman2*H_kalman2)'*/
 
  mulmat(K_kalman2,H_kalman2,tmp000,3,2,3);
  sub_Mat(I,tmp000,tmp000,3,3);//tmp000=(eye(3)-K_kalman2*H_kalman2)*/
  
  mulmat(tmp000,tmp00,P_kalman2,3,3,3);//P_kalman2= (eye(3)-K_kalman2*H_kalman2)*P_kalman2*(eye(3)-K_kalman2*H_kalman2)'*/
  accum(P_kalman2,tmp0,3,3);//P_kalman2= (eye(3)-K_kalman2*H_kalman2)*P_kalman2*(eye(3)-K_kalman2*H_kalman2)' + K_kalman2*R_kalman2*K_kalman2'*/
  
//**/
  x_kalman2[0,0] := myfmod(x_kalman2[0,0], 360);

//*  x_kalman2 = F_kalman2*x_kalman2;*/
  mulmat(F_kalman2,x_kalman2,tmp8,3,3,1);
  mulmat(I,tmp8,x_kalman2,3,3,1);
  //printMat(x_kalman2,3,1);
 //* P_kalman2 = F_kalman2*P_kalman2*F_kalman2'+Q_kalman2;*/
  mulmat(F_kalman2, P_kalman2 ,tmp0, 3, 3, 3);
  transpose(F_kalman2,Ft, 3, 3);
  mulmat(tmp0, Ft, P_kalman2, 3, 3, 3);
  accum(P_kalman2, Q_kalman2, 3, 3);
  kalLinSpd:= x_kalman1[0,0];
  kalAngSpd:=x_kalman2[1,0];



//*************************KALMAN - 3****************************************************************/

  //  K_kalman3 = P_kalman3*H_kalman3'*inv(H_kalman3*P_kalman3*H_kalman3'+R_kalman3);   */
    transpose(H_kalman3, Ht3, 3, 3);
    mulmat(P_kalman3, Ht3, tmp1_3, 3, 3, 3);
    mulmat(H_kalman3, P_kalman3, tmp2_3, 3, 3, 3);
    mulmat(tmp2_3, Ht3, tmp3_3, 3, 3, 3);
    accum(tmp3_3, R_kalman3, 3, 3);
    IF (cholsl(tmp3_3, tmp4_3, tmp5_3, 3)=1) THEN
      RETURN;
    END_IF 
    
    mulmat(tmp1_3, tmp4_3, K_kalman3, 3, 3, 3);    

    // if(qr_message == 0){
    //   err_kalman3[0] = z_kalman3[0];
    //   err_kalman3[1] = z_kalman3[1];
    //   err_kalman3[2] = errorDegreeCalculator(z_kalman3[2],0);
    // }
    // else{
    //   err_kalman3[0] = z_kalman3[0] -  x_kalman3[0,0];
    //   err_kalman3[1] = z_kalman3[1] -  x_kalman3[0,1];
    //   err_kalman3[2] = errorDegreeCalculator(z_kalman3[2], x_kalman3[0,2]);
    // }

  err_kalman3[0,0] := z_kalman3[0,0] - x_kalman3[0,0];
  err_kalman3[1,0] := z_kalman3[1,0] -	 x_kalman3[1,0];
  err_kalman3[2,0] := errorDegreeCalculator(z_kalman3[2,0], x_kalman3[2,0]); 

  //x_kalman3 = x_kalman3 + K_kalman3*err_kalman3;*/
  mulmat(K_kalman3, err_kalman3, tmp8, 3, 3, 1);
  accum(x_kalman3, tmp8, 3, 1);

  x_kalman3[2,0] := myfmod(x_kalman3[2,0], 360);

  //x_kalman3 = x_kalman3 + K_kalman3*(z_kalman3-H_kalman3*x_kalman3);*/ //bu denklem yerine yukarıdaki 4 denklem eklendi
  //   mulmat(H_kalman3,x_kalman3,tmp6_3,3,3,1);
  //   sub(z_kalman3,tmp6_3,tmp7_3,3);
  //   mulmat(K_kalman3,tmp7_3,tmp8,3,3,1);
  //   accum(x_kalman3,tmp8,3,1);

  // P_kalman3 = (eye(3)-K_kalman3*H_kalman3)*P_kalman3;*/
    mulmat(K_kalman3,H_kalman3,tmp0,3,3,3);
    sub_Mat(I,tmp0,tmp0,3,3);
    mulmat(tmp0,P_kalman3,tmp00,3,3,3);//tmp00=(eye(3)-K_kalman3*H_kalman3)*P_kalman3*/   ////////////////////////
    mulmat(tmp00,I,P_kalman3,3,3,3);

  x_kalman3[0,0] := x_kalman3[0,0] + x_kalman1[0,0]*COS(x_kalman3[2,0]*PI/180)*PLC_CYCLE;
  x_kalman3[1,0] := x_kalman3[1,0] + x_kalman1[0,0]*SIN(x_kalman3[2,0]*PI/180)*PLC_CYCLE;
  IF (pf_valid=0)THEN
  	x_kalman3[2,0] := x_kalman3[2,0] + x_kalman2[1,0]*PLC_CYCLE;
  ELSE
	  x_kalman3[2,0] :=-1*robotdata.qr_angle * 0.1;
  END_IF

  IF ( x_kalman3[2,0] >=180 AND x_kalman3[2,0] <= 360)THEN
    x_kalman3[2,0] := x_kalman3[2,0]-360;
  END_IF

  F_kalman3[0,0]:=1;F_kalman3[0,1]:=0;F_kalman3[0,2]:= -1* x_kalman1[0,0]*COS(x_kalman2[0,0]*PI/180)*PLC_CYCLE;
  F_kalman3[1,0]:=0;F_kalman3[1,1]:=1;F_kalman3[1,2]:= -1* x_kalman1[0,0]*SIN(x_kalman2[0,0]*PI/180)*PLC_CYCLE;
  F_kalman3[2,0]:=0;F_kalman3[2,1]:=0;F_kalman3[2,2]:=1;
  //P_kalman3 = Fk_kalman3*P_kalman3*Fk_kalman3'+Q_kalman3;
    mulmat(F_kalman3,P_kalman3,tmp0,3,3,3);
    transpose(F_kalman3,Ft,3,3);   
    mulmat(tmp0,Ft,P_kalman3,3,3,3);
    accum(P_kalman3,Q_kalman3,3,3);

    setIdealAngle();

    robotAngle := x_kalman3[2,0];
    PosFdbckX :=  x_kalman3[0,0];
    PosFdbckY :=  x_kalman3[1,0];]]></ST>
    </Implementation>
    <LineIds Name="kalmanStep">
      <LineId Id="494" Count="2" />
      <LineId Id="716" Count="0" />
      <LineId Id="704" Count="0" />
      <LineId Id="707" Count="0" />
      <LineId Id="497" Count="0" />
      <LineId Id="708" Count="0" />
      <LineId Id="498" Count="3" />
      <LineId Id="709" Count="1" />
      <LineId Id="502" Count="6" />
      <LineId Id="523" Count="4" />
      <LineId Id="711" Count="1" />
      <LineId Id="530" Count="1" />
      <LineId Id="533" Count="5" />
      <LineId Id="713" Count="1" />
      <LineId Id="539" Count="33" />
      <LineId Id="715" Count="0" />
      <LineId Id="574" Count="62" />
      <LineId Id="638" Count="6" />
      <LineId Id="646" Count="38" />
      <LineId Id="745" Count="0" />
      <LineId Id="685" Count="0" />
      <LineId Id="747" Count="1" />
      <LineId Id="746" Count="0" />
      <LineId Id="686" Count="17" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>