<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="kalmanStep" Id="{49da3f9a-63ad-4c0f-9a0d-d5b9dfc4c942}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK kalmanStep
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
tmp0:ARRAY[0..2,0..2] OF LREAL;
tmp00:ARRAY[0..2,0..2] OF LREAL;
tmp00s:ARRAY[0..2,0..2] OF LREAL;
tmp00t:ARRAY[0..2,0..2] OF LREAL;
tmp000:ARRAY[0..2,0..2] OF LREAL;
Ft:ARRAY[0..2,0..2] OF LREAL;
Ht:ARRAY[0..2,0..1] OF LREAL;
Ht3:ARRAY[0..2,0..2] OF LREAL;
tmp1:ARRAY[0..2,0..1] OF LREAL;
tmp2:ARRAY[0..1,0..2] OF LREAL;
tmp3:ARRAY[0..1,0..1] OF LREAL;
tmp4:ARRAY[0..1,0..1] OF LREAL;
tmp5:ARRAY[0..1,0..1] OF LREAL;
tmp6:ARRAY[0..1] OF LREAL;
tmp7:ARRAY[0..1] OF LREAL;
tmp8:ARRAY[0..2] OF LREAL;
Kt:ARRAY[0..1,0..2] OF LREAL;
tmp3_m: Array2DStaticMatrix; 
tmp7_m: Array2DStaticMatrix; 
F_subMat:subMat;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[  linSpdFdbckRobot := (rightWheelFdbck+leftWheelFdbck)*2*PI/60*WHEEL_RADIUS/2;
//  posTheta_wrt_robot_enc :=((-1*encoder_odometry->positionR - encoder_odometry->positionL)/10000)*360*g_app_config->wheel_radius/(2*g_app_config->robot_radius)/g_app_config->reducer_ratio + ((-1*qr_ang*0.1)-90); 
   posTheta_wrt_robot_enc :=robotdata.encoder_yaw;
  z_kalman1[0]:=linSpdFdbckRobot;z_kalman1[1]:=robotdata.imu_state.acc_x;//ads ye ekle
  z_kalman2[0]:=posTheta_wrt_robot_enc;z_kalman2[1]:=robotdata.imu_state.gyro_z*180/PI;//ads ye ekle

  kalman12_x := kalman12_x + x_kalman1[0]*COS(x_kalman2[0]*PI/180)*PLC_CYCLE;
  kalman12_y := kalman12_y + x_kalman1[0]*SIN(x_kalman2[0]*PI/180)*PLC_CYCLE;
  z_kalman3[0] :=qr_xstate;z_kalman3[1] := qr_ystate;z_kalman3[2] := (-robotdata.qr_angle * 0.1-PF_OFFSET);
      
  IF (pf_x_angle_valid=0 OR pf_y_tag_valid=0)THEN
        H_kalman3_M[0][0]:=0;H_kalman3_M[0][1]:=0;H_kalman3_M[0][2]:=0;
        H_kalman3_M[1][0]:=0;H_kalman3_M[1][1]:=0;H_kalman3_M[1][2]:=0;
        H_kalman3_M[2][0]:=0;H_kalman3_M[2][1]:=0;H_kalman3_M[2][2]:=0;
  
    else
        H_kalman3_M[0][0]:=1;H_kalman3_M[0][1]:=0;H_kalman3_M[0][2]:=0;
        H_kalman3_M[1][0]:=0;H_kalman3_M[1][1]:=1;H_kalman3_M[1][2]:=0;
        H_kalman3_M[2][0]:=0;H_kalman3_M[2][1]:=0;H_kalman3_M[2][2]:=1;
      END_IF
      

//*************************KALMAN - 1****************************************************************/

  //*  K_kalman1 = P_kalman1*H_kalman1'*inv(H_kalman1*P_kalman1*H_kalman1'+R_kalman1);   
    Matrix_Transpose(H_kalman1_M, Ht);
    Matrix_Product(P_kalman1_M, Ht, tmp1);

    Matrix_Product(H_kalman1_M, P_kalman1_M, tmp2);
    Matrix_Product(tmp2, Ht, tmp3);
	tmp3_m(Data:=tmp3);
	tmp3_m.ElementSum(R_kalman1_M);
    IF (cholsl(ADR(tmp3), ADR(tmp4), ADR(tmp5), 2)=1) THEN 
		RETURN;
	END_IF
    Matrix_Product(tmp1, tmp4, K_kalman1_m);

    Matrix_Product(H_kalman1_m,x_kalman1,tmp6);
	tmp7_m(data:=z_kalman1);
	tmp7_m.ElementDifference(tmp6);
    Matrix_Product(K_kalman1_m,tmp7_m,tmp8);
	x_kalman1_m.ElementSum(tmp8);
  
  Matrix_Transpose(K_kalman1_m,Kt);
  Matrix_Product(R_kalman1_m,Kt,tmp2);
  Matrix_Product(K_kalman1_m,tmp2,tmp0);
  
  Matrix_Product(K_kalman1_m,H_kalman1_m,tmp00);
  f_subMat(a:=Dynamicmatrix.InitIdentity(3),b:=tmp00,c:=tmp00,m:=3,n:=3);
  Matrix_Transpose(tmp00,tmp00t);
  Matrix_Product(P_kalman1_m,tmp00t,tmp00);
  Matrix_Product(K_kalman1_m,H_kalman1_m,tmp000);
  f_subMat(a:=Dynamicmatrix.InitIdentity(3),b:=ADR(tmp000),c:=ADR(tmp000),m:=3,n:=3);
  
  Matrix_Product(tmp000,tmp00,P_kalman1_m);
  P_kalman1_m.ElementSum(tmp0);
  
  Matrix_Product(F_kalman1_m,x_kalman1_m,tmp8);
  Matrix_Product(Dynamicmatrix.InitIdentity(3),tmp8,x_kalman1_m);
  Matrix_Product(F_kalman1_m, P_kalman1_m ,tmp0);
  Matrix_Transpose(F_kalman1_m,Ft);
  Matrix_Product(tmp0, Ft, P_kalman1_m);
  P_kalman1_m.ElementSum(Q_kalman1_m);
 
//*************************KALMAN - 2****************************************************************/

  /*  K_kalman2 = P_kalman2*H_kalman2'*inv(H_kalman2*P_kalman2*H_kalman2'+R_kalman2);   */
  transpose(H_kalman2, Ht, 2, 3);
  mulmat(P_kalman2, Ht, tmp1, 3, 3, 2);
  mulmat(H_kalman2, P_kalman2, tmp2, 2, 3, 3);
  mulmat(tmp2, Ht, tmp3, 2, 3, 2);
  accum(tmp3, R_kalman2, 2, 2);  
    if (cholsl(tmp3, tmp4, tmp5, 2)){
      printMat(tmp3,2,2);
      return 1;
    }    
  mulmat(tmp1, tmp4, K_kalman2, 3, 2, 2);
  
  /* err_kalman2(1,1) = errorDegreeCalculator(z_kalman2(1), x_kalman2(1)); */
  /* err_kalman2(2,1) = z_kalman2 - x_kalman2(2); */
  err_kalman2[0] = errorDegreeCalculator(z_kalman2[0], x_kalman2[0]);
  err_kalman2[1] = z_kalman2[1] - x_kalman2[1];

  /* x_kalman2 = x_kalman2 + K_kalman2 * err_kalman2; */
  mulmat(K_kalman2, err_kalman2, tmp8, 3, 2, 1);
  accum(x_kalman2,tmp8,3,1);

  /* x_kalman2 = x_kalman2 + K_kalman2*(z_kalman2-H_kalman2*x_kalman2); */ //bu denklem yerine yukarıdaki 3 denklem eklendi
  // mulmat(H_kalman2,x_kalman2,tmp6,2,3,1); 
  // sub(z_kalman2,tmp6,tmp7,2);
  // mulmat(K_kalman2,tmp7,tmp8,3,2,1);
  // accum(x_kalman2,tmp8,3,1);

  /* P_kalman2 = (eye(3)-K_kalman2*H_kalman2)*P_kalman2*(eye(3)-K_kalman2*H_kalman2)'+K_kalman2*R_kalman2*K_kalman2';*/
  transpose(K_kalman2,Kt,3,2);
  mulmat(R_kalman2,Kt,tmp2,2,2,3);
  mulmat(K_kalman2,tmp2,tmp0,3,2,3);/*tmp0=K_kalman2*R_kalman2*K_kalman2'*/
  
  mulmat(K_kalman2,H_kalman2,tmp00,3,2,3);
  subMat(I,tmp00,tmp00,3,3);
  transpose(tmp00,tmp00t,3,3);
  mulmat(P_kalman2,tmp00t,tmp00,3,3,3);/*tmp00=P_kalman2*(eye(3)-K_kalman2*H_kalman2)'*/
 
  mulmat(K_kalman2,H_kalman2,tmp000,3,2,3);
  subMat(I,tmp000,tmp000,3,3);/*tmp000=(eye(3)-K_kalman2*H_kalman2)*/
  
  mulmat(tmp000,tmp00,P_kalman2,3,3,3);/*P_kalman2= (eye(3)-K_kalman2*H_kalman2)*P_kalman2*(eye(3)-K_kalman2*H_kalman2)'*/
  accum(P_kalman2,tmp0,3,3);/*P_kalman2= (eye(3)-K_kalman2*H_kalman2)*P_kalman2*(eye(3)-K_kalman2*H_kalman2)' + K_kalman2*R_kalman2*K_kalman2'*/
  
/**/
  x_kalman2[0] = myFmod(x_kalman2[0], 360);

/*  x_kalman2 = F_kalman2*x_kalman2;*/
  mulmat(F_kalman2,x_kalman2,tmp8,3,3,1);
  mulmat(I,tmp8,x_kalman2,3,3,1);
  //printMat(x_kalman2,3,1);
 /* P_kalman2 = F_kalman2*P_kalman2*F_kalman2'+Q_kalman2;*/
  mulmat(F_kalman2, P_kalman2 ,tmp0, 3, 3, 3);
  transpose(F_kalman2,Ft, 3, 3);
  mulmat(tmp0, Ft, P_kalman2, 3, 3, 3);
  accum(P_kalman2, Q_kalman2, 3, 3);
  kalLinSpd=x_kalman1[0];
  kalAngSpd=x_kalman2[1];



/*************************KALMAN - 3****************************************************************/

  double tmp1_3[3][3],tmp2_3[3][3],tmp3_3[3][3],tmp4_3[3][3],tmp5_3[3][3],tmp6_3[3],tmp7_3[3],Kt3[3][3];
  /*  K_kalman3 = P_kalman3*H_kalman3'*inv(H_kalman3*P_kalman3*H_kalman3'+R_kalman3);   */
    transpose(H_kalman3, Ht3, 3, 3);
    mulmat(P_kalman3, Ht3, tmp1_3, 3, 3, 3);
    mulmat(H_kalman3, P_kalman3, tmp2_3, 3, 3, 3);
    mulmat(tmp2_3, Ht3, tmp3_3, 3, 3, 3);
    accum(tmp3_3, R_kalman3, 3, 3);
    if (cholsl(tmp3_3, tmp4_3, tmp5_3, 3)){
      printMat(tmp3_3,2,2);
      return 1;
    } 
    
    mulmat(tmp1_3, tmp4_3, K_kalman3, 3, 3, 3);    

    // if(qr_message == 0){
    //   err_kalman3[0] = z_kalman3[0];
    //   err_kalman3[1] = z_kalman3[1];
    //   err_kalman3[2] = errorDegreeCalculator(z_kalman3[2],0);
    // }
    // else{
    //   err_kalman3[0] = z_kalman3[0] - x_kalman3[0];
    //   err_kalman3[1] = z_kalman3[1] - x_kalman3[1];
    //   err_kalman3[2] = errorDegreeCalculator(z_kalman3[2], x_kalman3[2]);
    // }

  err_kalman3[0] = z_kalman3[0] - x_kalman3[0];
  err_kalman3[1] = z_kalman3[1] - x_kalman3[1];
  err_kalman3[2] = errorDegreeCalculator(z_kalman3[2], x_kalman3[2]); 

  /*x_kalman3 = x_kalman3 + K_kalman3*err_kalman3;*/
  mulmat(K_kalman3, err_kalman3, tmp8, 3, 3, 1);
  accum(x_kalman3, tmp8, 3, 1);

  x_kalman3[2] = myFmod(x_kalman3[2], 360);

  /*x_kalman3 = x_kalman3 + K_kalman3*(z_kalman3-H_kalman3*x_kalman3);*/ //bu denklem yerine yukarıdaki 4 denklem eklendi
  //   mulmat(H_kalman3,x_kalman3,tmp6_3,3,3,1);
  //   sub(z_kalman3,tmp6_3,tmp7_3,3);
  //   mulmat(K_kalman3,tmp7_3,tmp8,3,3,1);
  //   accum(x_kalman3,tmp8,3,1);

  /* P_kalman3 = (eye(3)-K_kalman3*H_kalman3)*P_kalman3;*/
    mulmat(K_kalman3,H_kalman3,tmp0,3,3,3);
    subMat(I,tmp0,tmp0,3,3);
    mulmat(tmp0,P_kalman3,tmp00,3,3,3);/*tmp00=(eye(3)-K_kalman3*H_kalman3)*P_kalman3*/   ////////////////////////
    mulmat(tmp00,I,P_kalman3,3,3,3);

  x_kalman3[0] = x_kalman3[0] + x_kalman1[0]*COS(x_kalman3[2]*M_PI/180)*PLC_CYCLE;
  x_kalman3[1] = x_kalman3[1] + x_kalman1[0]*SIN(x_kalman3[2]*M_PI/180)*PLC_CYCLE;
  x_kalman3[2] = x_kalman3[2] + x_kalman2[1]*PLC_CYCLE;

  if ( x_kalman3[2] >=180 && x_kalman3[2] <= 360){
    x_kalman3[2] -=360;
  }

  F_kalman3[0][0]=1;F_kalman3[0][1]=0;F_kalman3[0][2]= -1*x_kalman1[0]*COS(x_kalman2[0]*M_PI/180)*PLC_CYCLE;
  F_kalman3[1][0]=0;F_kalman3[1][1]=1;F_kalman3[1][2]= -1*x_kalman1[0]*SIN(x_kalman2[0]*M_PI/180)*PLC_CYCLE;
  F_kalman3[2][0]=0;F_kalman3[2][1]=0;F_kalman3[2][2]=1;
  //P_kalman3 = Fk_kalman3*P_kalman3*Fk_kalman3'+Q_kalman3;
    mulmat(F_kalman3,P_kalman3,tmp0,3,3,3);
    transpose(F_kalman3,Ft,3,3);   
    mulmat(tmp0,Ft,P_kalman3,3,3,3);
    accum(P_kalman3,Q_kalman3,3,3);

    setIdealAngle();

    robotAngle = x_kalman3[2];
    PosFdbckX = x_kalman3[0];
    PosFdbckY = x_kalman3[1];]]></ST>
    </Implementation>
    <LineIds Name="kalmanStep">
      <LineId Id="115" Count="0" />
      <LineId Id="118" Count="1" />
      <LineId Id="346" Count="0" />
      <LineId Id="120" Count="11" />
      <LineId Id="145" Count="0" />
      <LineId Id="147" Count="12" />
      <LineId Id="348" Count="0" />
      <LineId Id="347" Count="0" />
      <LineId Id="160" Count="0" />
      <LineId Id="351" Count="0" />
      <LineId Id="349" Count="0" />
      <LineId Id="162" Count="1" />
      <LineId Id="165" Count="0" />
      <LineId Id="352" Count="0" />
      <LineId Id="354" Count="0" />
      <LineId Id="166" Count="0" />
      <LineId Id="355" Count="0" />
      <LineId Id="168" Count="1" />
      <LineId Id="171" Count="6" />
      <LineId Id="179" Count="3" />
      <LineId Id="357" Count="0" />
      <LineId Id="184" Count="0" />
      <LineId Id="186" Count="1" />
      <LineId Id="190" Count="2" />
      <LineId Id="359" Count="0" />
      <LineId Id="193" Count="0" />
      <LineId Id="195" Count="131" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>